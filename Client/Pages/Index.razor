@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<button @onclick="Buzz" disabled="@((!IsConnected) || (!buttonEnabled))">Buzz!</button>

<hr />

<span>@message</span>

<hr />

<ul id="userList">
    @foreach (var user in users)
    {
        <li>@($"{(user.IsRoomHost ? "🌟 " : "")}{user.Name}")</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<User> users = new List<User>();
    private string message;
    private string userInput;
    private bool buttonEnabled = true;
    private string roomId;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/buzz"))
            .Build();

        roomId = NavigationManager.Uri.Split('?', StringSplitOptions.RemoveEmptyEntries).Last();

        hubConnection.On<string>("BuzzedIn", (user) =>
        {
            message = $"{user} buzzed in!";
            StateHasChanged();
        });

        hubConnection.On<bool>("SetButton", (canClick) =>
        {
            buttonEnabled = canClick;
            StateHasChanged();
        });

        hubConnection.On<List<User>>("UpdateUserList", (userList) =>
        {
            users = userList;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinRoom", roomId, "steve");
    }

    Task Buzz() =>
        hubConnection.SendAsync("BuzzIn", userInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
