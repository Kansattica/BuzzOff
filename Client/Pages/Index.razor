@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<button id="ResetButton" @onclick="Reset" hidden="@(!isRoomOwner)">Reset</button>
<br />
<button id="BuzzButton" title="You can also hit the space bar to buzz in." @onclick="Buzz" disabled="@((!IsConnected) || (!buttonEnabled))">Buzz!</button>

<hr />

<span>@message</span>

<hr />

Users:
<ul id="userList">
    @foreach (var user in users)
    {
        <li title="@((user.IsRoomHost ? "This person is the host." : ""))" class="@(user.BuzzedIn ? "buzzed-in" : "")">@($"{(user.IsRoomHost ? "🌟 " : "")}{user.Name}")</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<User> users = new List<User>();
    private string message;
    private string userName = RandomName.RandomString(1);
    private bool buttonEnabled = true;
    private bool isRoomOwner = false;
    private string roomId;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/buzz"))
            .Build();

        roomId = NavigationManager.Uri.Split('?', StringSplitOptions.RemoveEmptyEntries).Last();

        hubConnection.On<User>("BuzzedIn", (user) =>
        {
            message = $"{user.Name} buzzed in!";
            users.ForEach(x =>
            {
                if (x.Id == user.Id) { x.BuzzedIn = true; }
            });
            StateHasChanged();
        });

        hubConnection.On("ClearMessage", () => { message = ""; StateHasChanged(); });

        hubConnection.On<bool>("SetButton", (canClick) =>
        {
            buttonEnabled = canClick;
            StateHasChanged();
        });

        hubConnection.On<List<User>>("UpdateUserList", (userList) =>
        {
            users = userList;
            StateHasChanged();
        });

        hubConnection.On<bool>("IsRoomOwner", (isOwner) =>
        {
            isRoomOwner = isOwner;
            // I'm pretty sure this can't change without the user list changing at the same time.
            //StateHasChanged();
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinRoom", roomId, userName);
    }

    Task Buzz() =>
        hubConnection.SendAsync("BuzzIn");

    Task Reset() =>
        hubConnection.SendAsync("Reset");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
